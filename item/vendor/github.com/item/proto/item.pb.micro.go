// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: item.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Item service

type ItemService interface {
	ListItem(ctx context.Context, in *ListItemRequest, opts ...client.CallOption) (*ListItemResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...client.CallOption) (*GetItemResponse, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...client.CallOption) (*CreateItemResponse, error)
	PublishPromo(ctx context.Context, in *PublishPromoRequest, opts ...client.CallOption) (*PublishPromoResponse, error)
}

type itemService struct {
	c    client.Client
	name string
}

func NewItemService(name string, c client.Client) ItemService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &itemService{
		c:    c,
		name: name,
	}
}

func (c *itemService) ListItem(ctx context.Context, in *ListItemRequest, opts ...client.CallOption) (*ListItemResponse, error) {
	req := c.c.NewRequest(c.name, "Item.ListItem", in)
	out := new(ListItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemService) GetItem(ctx context.Context, in *GetItemRequest, opts ...client.CallOption) (*GetItemResponse, error) {
	req := c.c.NewRequest(c.name, "Item.GetItem", in)
	out := new(GetItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemService) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...client.CallOption) (*CreateItemResponse, error) {
	req := c.c.NewRequest(c.name, "Item.CreateItem", in)
	out := new(CreateItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemService) PublishPromo(ctx context.Context, in *PublishPromoRequest, opts ...client.CallOption) (*PublishPromoResponse, error) {
	req := c.c.NewRequest(c.name, "Item.PublishPromo", in)
	out := new(PublishPromoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Item service

type ItemHandler interface {
	ListItem(context.Context, *ListItemRequest, *ListItemResponse) error
	GetItem(context.Context, *GetItemRequest, *GetItemResponse) error
	CreateItem(context.Context, *CreateItemRequest, *CreateItemResponse) error
	PublishPromo(context.Context, *PublishPromoRequest, *PublishPromoResponse) error
}

func RegisterItemHandler(s server.Server, hdlr ItemHandler, opts ...server.HandlerOption) error {
	type item interface {
		ListItem(ctx context.Context, in *ListItemRequest, out *ListItemResponse) error
		GetItem(ctx context.Context, in *GetItemRequest, out *GetItemResponse) error
		CreateItem(ctx context.Context, in *CreateItemRequest, out *CreateItemResponse) error
		PublishPromo(ctx context.Context, in *PublishPromoRequest, out *PublishPromoResponse) error
	}
	type Item struct {
		item
	}
	h := &itemHandler{hdlr}
	return s.Handle(s.NewHandler(&Item{h}, opts...))
}

type itemHandler struct {
	ItemHandler
}

func (h *itemHandler) ListItem(ctx context.Context, in *ListItemRequest, out *ListItemResponse) error {
	return h.ItemHandler.ListItem(ctx, in, out)
}

func (h *itemHandler) GetItem(ctx context.Context, in *GetItemRequest, out *GetItemResponse) error {
	return h.ItemHandler.GetItem(ctx, in, out)
}

func (h *itemHandler) CreateItem(ctx context.Context, in *CreateItemRequest, out *CreateItemResponse) error {
	return h.ItemHandler.CreateItem(ctx, in, out)
}

func (h *itemHandler) PublishPromo(ctx context.Context, in *PublishPromoRequest, out *PublishPromoResponse) error {
	return h.ItemHandler.PublishPromo(ctx, in, out)
}
